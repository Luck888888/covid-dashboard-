{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\RssSchool\\\\covid-dashboard\\\\covid-dashboard\\\\covid-dashboard\\\\src\\\\App.jsx\";\n\n/* eslint-disable */\n\n/* eslint-disable max-len */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MapView from './components/Map/MapView';\nimport 'leaflet/dist/leaflet.css';\nimport './Css/List.scss';\nimport axios from './axios';\nimport Summary from './components/Summary.jsx';\nimport DetailsView from './components/Map/DetailsView.jsx';\nimport './components/Map.css';\nimport './App.scss';\nimport Table1 from './components/table1.jsx';\nimport Table1p2 from './components/table1p2.jsx';\nimport useFetch from './components/getInfo.jsx';\nimport './App.css';\nimport { filterInfo, periodInfo, statusInfo } from './js/table1Info';\nimport findCountryInfo from './js/findCountryInfo';\nimport Chart4 from './components/chart4.jsx';\nimport { getWorldChartInfo, getCountryChartInfo, dtimeNums } from './js/getChartInfo';\nimport Footer from './components/footer.jsx';\n\nfunction App() {\n  // const [locationArray, setLocationArray] = useState([]);\n  // const [selectedLocation, setSelectedLocation] = useState(null);\n  // const [mapCenter, setMapCenter] = useState([51.505, -0.09]);\n  // const [loading, setLoading] = useState(false);\n  //   const info = useFetch('https://api.covid19api.com/summary');\n  //   const [status, setStatusInfo] = useState(0);\n  //   const [period, setPeriodInfo] = useState(0);\n  //   const [numeration, setNumeration] = useState(0);\n  //   const [countryData, setCountry] = useState('Belarus');\n  //   const [chartCountry, setChartCountry] = useState('World');\n  //   const [displayingCountryData, setdisplayingCountryData] = useState(false);\n  //   const OneCountryChartInfo = useFetch(`https://api.covid19api.com/dayone/country/${countryData}`);\n  //   const WorldChartInfo = useFetch(`https://api.covid19api.com/world?from=2020-03-01T00:00:00Z&to=${dtimeNums(-1)}T00:00:00Z`);\n  //   const population = useFetch(`https://restcountries.eu/rest/v2/name/${countryData}`);\n  //   const changeConditionfromTable = (p, s) => {\n  //     setPeriodInfo(p);\n  //     setStatusInfo(s);\n  //   };\n  //   const changeCondition = (p, s, n) => {\n  //     setPeriodInfo(p);\n  //     setStatusInfo(s);\n  //     setNumeration(n);\n  //   };\n  // const filterChartData = () => {\n  //     if (displayingCountryData) {\n  //       return getCountryChartInfo(OneCountryChartInfo,\n  //         period,\n  //         status,\n  //         numeration,\n  //         population[0].population);\n  //     }\n  //     return getWorldChartInfo(WorldChartInfo, period, status, numeration);\n  //   };\n  //   const filterData = () => filterInfo(info, period, status);\n  //   const findCountry = (country) => {\n  //     setCountry(country);\n  //     setChartCountry(country);\n  //     setdisplayingCountryData(true);\n  //   };\n  // function sortedLocationArray(locations) {\n  //   // eslint-disable-next-line max-len\n  //   return [...locations].sort((location1, location2) => location2.latest.confirmed - location1.latest.confirmed);\n  // }\n  // const onSelectLocation = useCallback((id) => {\n  //   const location = locationArray.find((_location) => _location.id === id);\n  //   if (location === undefined) {\n  //     setSelectedLocation(null);\n  //     return;\n  //   }\n  //   setSelectedLocation(location);\n  //   const { coordinates: { latitude, longitude } } = location;\n  //   setMapCenter([latitude, longitude]);\n  // }, [locationArray]);\n  // const onDeselectLocation = useCallback(() => {\n  //   setSelectedLocation(null);\n  // }, []);\n  // useEffect(() => {\n  //   setLoading(true);\n  //   axios.get('/v2/locations').then((res) => {\n  //     const sortedLocations = sortedLocationArray(res.data.locations);\n  //     setLoading(false);\n  //     if (res.status === 200) {\n  //       setLocationArray(sortedLocations);\n  //     }\n  //   })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n  // }, []);\n  // let detailsView = null;\n  // if (selectedLocation != null) {\n  //   detailsView = <DetailsView location={selectedLocation} onClickClose={onDeselectLocation} />;\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"COVID-19 Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Summary, {\n        locationArray: locationArray,\n        loading: loading,\n        selectedLocation: selectedLocation,\n        onSelectItem: onSelectLocation,\n        onDeselectItem: onDeselectLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards_map\",\n        children: [/*#__PURE__*/_jsxDEV(MapView, {\n          locationArray: locationArray,\n          mapCenter: mapCenter,\n          onSelectMarker: onSelectLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 8\n        }, this), detailsView]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }, this), info && WorldChartInfo && /*#__PURE__*/_jsxDEV(Table1, {\n        changeCondition: changeConditionfromTable,\n        filterData: filterData,\n        filterChartData: filterChartData(periodInfo),\n        info: filterData(),\n        periodInfo: periodInfo,\n        findCountry: findCountry,\n        statusInfo: statusInfo,\n        status: status,\n        period: period\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 36\n      }, this), info && population && /*#__PURE__*/_jsxDEV(Table1p2, {\n        info: findCountryInfo(info, countryData),\n        population: population[0].population\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 32\n      }, this), info && WorldChartInfo && /*#__PURE__*/_jsxDEV(Chart4, {\n        changeCondition: changeCondition,\n        info: filterChartData(),\n        country: chartCountry,\n        statusInfo: statusInfo,\n        periodInfo: periodInfo,\n        status: status,\n        period: period,\n        numeration: numeration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 36\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }, this), info && /*#__PURE__*/_jsxDEV(Table1p2, {\n        info: findCountryInfo(info, countryData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/RssSchool/covid-dashboard/covid-dashboard/covid-dashboard/src/App.jsx"],"names":["React","useState","useEffect","useCallback","MapView","axios","Summary","DetailsView","Table1","Table1p2","useFetch","filterInfo","periodInfo","statusInfo","findCountryInfo","Chart4","getWorldChartInfo","getCountryChartInfo","dtimeNums","Footer","App","locationArray","loading","selectedLocation","onSelectLocation","onDeselectLocation","mapCenter","detailsView","info","WorldChartInfo","changeConditionfromTable","filterData","filterChartData","findCountry","status","period","population","countryData","changeCondition","chartCountry","numeration"],"mappings":"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","sourcesContent":["/* eslint-disable */\n/* eslint-disable max-len */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MapView from './components/Map/MapView';\nimport 'leaflet/dist/leaflet.css';\nimport './Css/List.scss';\nimport axios from './axios';\nimport Summary from './components/Summary.jsx';\nimport DetailsView from './components/Map/DetailsView.jsx';\nimport './components/Map.css';\nimport './App.scss';\nimport Table1 from './components/table1.jsx';\nimport Table1p2 from './components/table1p2.jsx';\nimport useFetch from './components/getInfo.jsx';\nimport './App.css';\n\nimport {\n  filterInfo,\n  periodInfo,\n  statusInfo,\n} from './js/table1Info';\nimport findCountryInfo from './js/findCountryInfo';\nimport Chart4 from './components/chart4.jsx';\nimport { getWorldChartInfo, getCountryChartInfo, dtimeNums } from './js/getChartInfo';\nimport Footer from './components/footer.jsx';\n\nfunction App() {\n  // const [locationArray, setLocationArray] = useState([]);\n  // const [selectedLocation, setSelectedLocation] = useState(null);\n  // const [mapCenter, setMapCenter] = useState([51.505, -0.09]);\n  // const [loading, setLoading] = useState(false);\n//   const info = useFetch('https://api.covid19api.com/summary');\n//   const [status, setStatusInfo] = useState(0);\n//   const [period, setPeriodInfo] = useState(0);\n//   const [numeration, setNumeration] = useState(0);\n//   const [countryData, setCountry] = useState('Belarus');\n//   const [chartCountry, setChartCountry] = useState('World');\n//   const [displayingCountryData, setdisplayingCountryData] = useState(false);\n//   const OneCountryChartInfo = useFetch(`https://api.covid19api.com/dayone/country/${countryData}`);\n//   const WorldChartInfo = useFetch(`https://api.covid19api.com/world?from=2020-03-01T00:00:00Z&to=${dtimeNums(-1)}T00:00:00Z`);\n//   const population = useFetch(`https://restcountries.eu/rest/v2/name/${countryData}`);\n\n//   const changeConditionfromTable = (p, s) => {\n//     setPeriodInfo(p);\n//     setStatusInfo(s);\n//   };\n//   const changeCondition = (p, s, n) => {\n//     setPeriodInfo(p);\n//     setStatusInfo(s);\n//     setNumeration(n);\n//   };\n\n// const filterChartData = () => {\n//     if (displayingCountryData) {\n//       return getCountryChartInfo(OneCountryChartInfo,\n//         period,\n//         status,\n//         numeration,\n//         population[0].population);\n//     }\n//     return getWorldChartInfo(WorldChartInfo, period, status, numeration);\n//   };\n\n//   const filterData = () => filterInfo(info, period, status);\n//   const findCountry = (country) => {\n//     setCountry(country);\n//     setChartCountry(country);\n//     setdisplayingCountryData(true);\n//   };\n\n  // function sortedLocationArray(locations) {\n  //   // eslint-disable-next-line max-len\n  //   return [...locations].sort((location1, location2) => location2.latest.confirmed - location1.latest.confirmed);\n  // }\n  // const onSelectLocation = useCallback((id) => {\n  //   const location = locationArray.find((_location) => _location.id === id);\n  //   if (location === undefined) {\n  //     setSelectedLocation(null);\n  //     return;\n  //   }\n  //   setSelectedLocation(location);\n  //   const { coordinates: { latitude, longitude } } = location;\n  //   setMapCenter([latitude, longitude]);\n  // }, [locationArray]);\n\n\n  // const onDeselectLocation = useCallback(() => {\n  //   setSelectedLocation(null);\n  // }, []);\n\n  // useEffect(() => {\n  //   setLoading(true);\n  //   axios.get('/v2/locations').then((res) => {\n  //     const sortedLocations = sortedLocationArray(res.data.locations);\n  //     setLoading(false);\n\n  //     if (res.status === 200) {\n  //       setLocationArray(sortedLocations);\n  //     }\n  //   })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n  // }, []);\n\n  // let detailsView = null;\n  // if (selectedLocation != null) {\n  //   detailsView = <DetailsView location={selectedLocation} onClickClose={onDeselectLocation} />;\n  // }\n  return (\n\n    <div className=\"App\">\n\n    <div className=\"app__left\">\n\n    <div className=\"app__header\">\n    <h1>COVID-19 Dashboard</h1>\n   </div>\n\n          <Summary\n        locationArray={locationArray}\n        loading={loading}\n        selectedLocation={selectedLocation}\n        onSelectItem={onSelectLocation}\n        onDeselectItem={onDeselectLocation}\n          />\n\n    <div className='cards_map'>\n       <MapView\n      locationArray={locationArray}\n      mapCenter={mapCenter}\n      onSelectMarker={onSelectLocation} />\n      {detailsView}\n </div>\n      {/* <header className=\"App-header\">\n        <h1>COVID-19 Dashboard</h1>\n      </header> */}\n      {(info && WorldChartInfo) && <Table1\n        changeCondition={changeConditionfromTable}\n        filterData={filterData}\n        filterChartData={filterChartData(periodInfo)}\n        info={filterData()}\n        periodInfo={periodInfo}\n        findCountry={findCountry}\n        statusInfo={statusInfo}\n        status={status}\n        period={period}\n      />}\n      {(info && population) && <Table1p2 info={findCountryInfo(info, countryData)}\n        population={population[0].population} />}\n      {(info && WorldChartInfo) && <Chart4\n        changeCondition={changeCondition}\n        info={filterChartData()}\n        country={chartCountry}\n        statusInfo={statusInfo}\n        periodInfo={periodInfo}\n        status={status}\n        period={period}\n        numeration={numeration}\n      />}\n      <Footer/>\n      {info && <Table1p2 info={findCountryInfo(info, countryData)} />}\n\n       </div>\n </div>\n\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}