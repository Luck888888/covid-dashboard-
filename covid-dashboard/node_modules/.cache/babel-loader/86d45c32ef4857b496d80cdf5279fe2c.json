{"ast":null,"code":"export const getWorldChartInfo = (summary, period, status, numeration) => {\n  let chartData = [];\n  let color = 'rgba(221, 1, 1, 0.650)';\n  const statusArr = period ? ['New confirmed', 'New deaths', 'New recovered'] : ['Confirmed', 'Deaths', 'Recovered'];\n  const now = new Date();\n  const MonthArr = [15, 31, 30, 31, 31, 30, 31, 30, now.getDate()];\n  let c = 0;\n  let j = 0;\n  let sum = 0;\n  let num = MonthArr[j];\n\n  switch (status) {\n    case 0:\n      summary.forEach(el => {\n        if (c <= num) {\n          period ? sum += Number(el.NewConfirmed) : sum += Number(el.TotalConfirmed);\n          c += 1;\n        }\n\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n\n      break;\n\n    case 1:\n      summary.forEach(el => {\n        if (c <= num) {\n          period ? sum += Number(el.NewDeaths) : sum += Number(el.TotalDeaths);\n          c += 1;\n        }\n\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n\n      break;\n\n    case 2:\n      color = 'rgba(75, 148, 20, 0.644)';\n      summary.forEach(el => {\n        if (c <= num) {\n          period ? sum += Number(el.NewRecovered) : sum += Number(el.TotalRecovered);\n          c += 1;\n        }\n\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  if (numeration) {\n    chartData = chartData.map(el => Math.trunc(el * 100000 / 7827000000));\n  }\n\n  const res = {\n    data: {\n      labels: ['Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n      datasets: [{\n        label: `${statusArr[status]} cases`,\n        backgroundColor: color,\n        data: chartData\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      layout: {\n        padding: {\n          top: 0,\n          left: 15,\n          right: 15,\n          bottom: 0\n        }\n      },\n      scales: {\n        xAxes: [{\n          ticks: {\n            display: false\n          },\n          gridLines: {\n            display: false,\n            drawBorder: false\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            display: false\n          },\n          gridLines: {\n            display: false,\n            drawBorder: false\n          }\n        }]\n      }\n    }\n  };\n  return res;\n};\nexport const getCountryChartInfo = (summary, period, status, numeration, population) => {\n  let chartData = [];\n  let color = 'rgba(221, 1, 1, 0.650)';\n  const statusArr = ['Confirmed', 'Deaths', 'Recovered'];\n  const monthTotal = [];\n  const daysTotal = [];\n  let days = 0;\n  let month = 0;\n  let check = '02';\n\n  switch (status) {\n    case 0:\n      summary.forEach(el => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n\n        days += 1;\n        month += Number(el.Confirmed);\n      });\n\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n\n      break;\n\n    case 1:\n      summary.forEach(el => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n\n        days += 1;\n        month += Number(el.Deaths);\n      });\n\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n\n      break;\n\n    case 2:\n      color = 'rgba(75, 148, 20, 0.644)';\n      summary.forEach(el => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n\n        days += 1;\n        month += Number(el.Recovered);\n      });\n\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  if (numeration) {\n    chartData = chartData.map(el => Math.trunc(el * 100000 / population));\n  }\n\n  const res = {\n    data: {\n      labels: ['Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n      datasets: [{\n        label: `${statusArr[status]} cases`,\n        backgroundColor: color,\n        data: chartData\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      layout: {\n        padding: {\n          top: 0,\n          left: 15,\n          right: 15,\n          bottom: 0\n        }\n      },\n      scales: {\n        xAxes: [{\n          ticks: {\n            display: false\n          },\n          gridLines: {\n            display: false,\n            drawBorder: false\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            display: false\n          },\n          gridLines: {\n            display: false,\n            drawBorder: false\n          }\n        }]\n      }\n    }\n  };\n  return res;\n};\nexport function dtimeNums(e) {\n  const n = new Date();\n  n.setDate(n.getDate() + e);\n  return n.toISOString().slice(0, 10);\n}","map":{"version":3,"sources":["E:/RssSchool/covid-dashboard/covid-dashboard/covid-dashboard/src/js/getChartInfo.js"],"names":["getWorldChartInfo","summary","period","status","numeration","chartData","color","statusArr","now","Date","MonthArr","getDate","c","j","sum","num","forEach","el","Number","NewConfirmed","TotalConfirmed","push","i","length","Math","trunc","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","map","res","data","labels","datasets","label","backgroundColor","options","responsive","maintainAspectRatio","layout","padding","top","left","right","bottom","scales","xAxes","ticks","display","gridLines","drawBorder","yAxes","getCountryChartInfo","population","monthTotal","daysTotal","days","month","check","slice","Confirmed","Deaths","Recovered","dtimeNums","e","n","setDate","toISOString"],"mappings":"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","sourcesContent":["export const getWorldChartInfo = (summary, period, status, numeration) => {\n  let chartData = [];\n  let color = 'rgba(221, 1, 1, 0.650)';\n  const statusArr = period ? ['New confirmed', 'New deaths', 'New recovered'] : ['Confirmed', 'Deaths', 'Recovered'];\n  const now = new Date();\n  const MonthArr = [15, 31, 30, 31, 31, 30, 31, 30, now.getDate()];\n  let c = 0;\n  let j = 0;\n  let sum = 0;\n  let num = MonthArr[j];\n  switch (status) {\n    case 0:\n      summary.forEach((el) => {\n        if (c <= num) {\n          period ? sum += Number(el.NewConfirmed) : sum += Number(el.TotalConfirmed);\n          c += 1;\n        }\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n      break;\n    case 1:\n      summary.forEach((el) => {\n        if (c <= num) {\n          period ? sum += Number(el.NewDeaths) : sum += Number(el.TotalDeaths);\n          c += 1;\n        }\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n      break;\n    case 2:\n      color = 'rgba(75, 148, 20, 0.644)';\n      summary.forEach((el) => {\n        if (c <= num) {\n          period ? sum += Number(el.NewRecovered) : sum += Number(el.TotalRecovered);\n          c += 1;\n        }\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n      break;\n    default:\n      break;\n  }\n\n  if (numeration) {\n    chartData = chartData.map((el) => Math.trunc((el * 100000) / 7827000000));\n  }\n\n  const res = {\n    data: {\n      labels: ['Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n      datasets: [\n        {\n          label: `${statusArr[status]} cases`,\n          backgroundColor: color,\n          data: chartData,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      layout: {\n        padding: {\n          top: 0,\n          left: 15,\n          right: 15,\n          bottom: 0,\n        },\n      },\n      scales: {\n        xAxes: [{\n          ticks: { display: false },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n          },\n        }],\n        yAxes: [{\n          ticks: { display: false },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n          },\n        }],\n      },\n\n    },\n  };\n\n  return res;\n};\nexport const getCountryChartInfo = (summary, period, status, numeration, population) => {\n  let chartData = [];\n  let color = 'rgba(221, 1, 1, 0.650)';\n  const statusArr = ['Confirmed', 'Deaths', 'Recovered'];\n  const monthTotal = [];\n  const daysTotal = [];\n  let days = 0;\n  let month = 0;\n  let check = '02';\n  switch (status) {\n    case 0:\n\n      summary.forEach((el) => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n        days += 1;\n        month += Number(el.Confirmed);\n      });\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n      break;\n    case 1:\n      summary.forEach((el) => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n        days += 1;\n        month += Number(el.Deaths);\n      });\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n      break;\n    case 2:\n      color = 'rgba(75, 148, 20, 0.644)';\n      summary.forEach((el) => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n        days += 1;\n        month += Number(el.Recovered);\n      });\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  if (numeration) {\n    chartData = chartData.map((el) => Math.trunc((el * 100000) / population));\n  }\n\n  const res = {\n    data: {\n      labels: ['Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n      datasets: [\n        {\n          label: `${statusArr[status]} cases`,\n          backgroundColor: color,\n          data: chartData,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      layout: {\n        padding: {\n          top: 0,\n          left: 15,\n          right: 15,\n          bottom: 0,\n        },\n      },\n      scales: {\n        xAxes: [{\n          ticks: { display: false },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n          },\n        }],\n        yAxes: [{\n          ticks: { display: false },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n          },\n        }],\n      },\n\n    },\n  };\n\n  return res;\n};\n\nexport function dtimeNums(e) {\n  const n = new Date();\n  n.setDate(n.getDate() + e);\n  return n.toISOString().slice(0, 10);\n}\n"]},"metadata":{},"sourceType":"module"}