{"ast":null,"code":"export var getWorldChartInfo=function getWorldChartInfo(summary,period,status,numeration){var chartData=[];var color='rgba(221, 1, 1, 0.650)';var statusArr=period?['New confirmed','New deaths','New recovered']:['Confirmed','Deaths','Recovered'];var now=new Date();var MonthArr=[15,31,30,31,31,30,31,30,now.getDate()];var c=0;var j=0;var sum=0;var num=MonthArr[j];switch(status){case 0:summary.forEach(function(el){if(c<=num){period?sum+=Number(el.NewConfirmed):sum+=Number(el.TotalConfirmed);c+=1;}if(c===num){j+=1;num=MonthArr[j];chartData.push(sum);sum=0;c=0;}});for(var i=0;i<MonthArr.length;i+=1){chartData[i]=Math.trunc(chartData[i]/MonthArr[i]);}break;case 1:summary.forEach(function(el){if(c<=num){period?sum+=Number(el.NewDeaths):sum+=Number(el.TotalDeaths);c+=1;}if(c===num){j+=1;num=MonthArr[j];chartData.push(sum);sum=0;c=0;}});for(var _i=0;_i<MonthArr.length;_i+=1){chartData[_i]=Math.trunc(chartData[_i]/MonthArr[_i]);}break;case 2:color='rgba(75, 148, 20, 0.644)';summary.forEach(function(el){if(c<=num){period?sum+=Number(el.NewRecovered):sum+=Number(el.TotalRecovered);c+=1;}if(c===num){j+=1;num=MonthArr[j];chartData.push(sum);sum=0;c=0;}});for(var _i2=0;_i2<MonthArr.length;_i2+=1){chartData[_i2]=Math.trunc(chartData[_i2]/MonthArr[_i2]);}break;default:break;}if(numeration){chartData=chartData.map(function(el){return Math.trunc(el*100000/7827000000);});}var res={data:{labels:['Apr','May','June','July','Aug','Sept','Oct','Nov','Dec'],datasets:[{label:\"\".concat(statusArr[status],\" cases\"),backgroundColor:color,data:chartData}]},options:{responsive:true,maintainAspectRatio:false,layout:{padding:{top:0,left:15,right:15,bottom:0}},scales:{xAxes:[{ticks:{display:false},gridLines:{display:false,drawBorder:false}}],yAxes:[{ticks:{display:false},gridLines:{display:false,drawBorder:false}}]}}};return res;};export var getCountryChartInfo=function getCountryChartInfo(summary,period,status,numeration,population){var chartData=[];var color='rgba(221, 1, 1, 0.650)';var statusArr=['Confirmed','Deaths','Recovered'];var monthTotal=[];var daysTotal=[];var days=0;var month=0;var check='02';switch(status){case 0:summary.forEach(function(el){if(el.Date.slice(5,7)!==check){check=el.Date.slice(5,7);daysTotal.push(days);monthTotal.push(month);days=0;month=0;}days+=1;month+=Number(el.Confirmed);});for(var i=0;i<daysTotal.length;i+=1){if(daysTotal[i]===0){chartData[i]=0;}else{chartData[i]=Math.trunc(monthTotal[i]/daysTotal[i]);}}break;case 1:summary.forEach(function(el){if(el.Date.slice(5,7)!==check){check=el.Date.slice(5,7);daysTotal.push(days);monthTotal.push(month);days=0;month=0;}days+=1;month+=Number(el.Deaths);});for(var _i3=0;_i3<daysTotal.length;_i3+=1){if(daysTotal[_i3]===0){chartData[_i3]=0;}else{chartData[_i3]=Math.trunc(monthTotal[_i3]/daysTotal[_i3]);}}break;case 2:color='rgba(75, 148, 20, 0.644)';summary.forEach(function(el){if(el.Date.slice(5,7)!==check){check=el.Date.slice(5,7);daysTotal.push(days);monthTotal.push(month);days=0;month=0;}days+=1;month+=Number(el.Recovered);});for(var _i4=0;_i4<daysTotal.length;_i4+=1){if(daysTotal[_i4]===0){chartData[_i4]=0;}else{chartData[_i4]=Math.trunc(monthTotal[_i4]/daysTotal[_i4]);}}break;default:break;}if(numeration){chartData=chartData.map(function(el){return Math.trunc(el*100000/population);});}var res={data:{labels:['Apr','May','June','July','Aug','Sept','Oct','Nov','Dec'],datasets:[{label:\"\".concat(statusArr[status],\" cases\"),backgroundColor:color,data:chartData}]},options:{responsive:true,maintainAspectRatio:false,layout:{padding:{top:0,left:15,right:15,bottom:0}},scales:{xAxes:[{ticks:{display:false},gridLines:{display:false,drawBorder:false}}],yAxes:[{ticks:{display:false},gridLines:{display:false,drawBorder:false}}]}}};return res;};export function dtimeNums(e){var n=new Date();n.setDate(n.getDate()+e);return n.toISOString().slice(0,10);}","map":{"version":3,"sources":["E:/RssSchool/covid-dashboard/covid-dashboard/covid-dashboard/src/js/getChartInfo.js"],"names":["getWorldChartInfo","summary","period","status","numeration","chartData","color","statusArr","now","Date","MonthArr","getDate","c","j","sum","num","forEach","el","Number","NewConfirmed","TotalConfirmed","push","i","length","Math","trunc","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","map","res","data","labels","datasets","label","backgroundColor","options","responsive","maintainAspectRatio","layout","padding","top","left","right","bottom","scales","xAxes","ticks","display","gridLines","drawBorder","yAxes","getCountryChartInfo","population","monthTotal","daysTotal","days","month","check","slice","Confirmed","Deaths","Recovered","dtimeNums","e","n","setDate","toISOString"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,OAAD,CAAUC,MAAV,CAAkBC,MAAlB,CAA0BC,UAA1B,CAAyC,CACxE,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CACA,GAAIC,CAAAA,KAAK,CAAG,wBAAZ,CACA,GAAMC,CAAAA,SAAS,CAAGL,MAAM,CAAG,CAAC,eAAD,CAAkB,YAAlB,CAAgC,eAAhC,CAAH,CAAsD,CAAC,WAAD,CAAc,QAAd,CAAwB,WAAxB,CAA9E,CACA,GAAMM,CAAAA,GAAG,CAAG,GAAIC,CAAAA,IAAJ,EAAZ,CACA,GAAMC,CAAAA,QAAQ,CAAG,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAiB,EAAjB,CAAqB,EAArB,CAAyB,EAAzB,CAA6B,EAA7B,CAAiCF,GAAG,CAACG,OAAJ,EAAjC,CAAjB,CACA,GAAIC,CAAAA,CAAC,CAAG,CAAR,CACA,GAAIC,CAAAA,CAAC,CAAG,CAAR,CACA,GAAIC,CAAAA,GAAG,CAAG,CAAV,CACA,GAAIC,CAAAA,GAAG,CAAGL,QAAQ,CAACG,CAAD,CAAlB,CACA,OAAQV,MAAR,EACE,IAAK,EAAL,CACEF,OAAO,CAACe,OAAR,CAAgB,SAACC,EAAD,CAAQ,CACtB,GAAIL,CAAC,EAAIG,GAAT,CAAc,CACZb,MAAM,CAAGY,GAAG,EAAII,MAAM,CAACD,EAAE,CAACE,YAAJ,CAAhB,CAAoCL,GAAG,EAAII,MAAM,CAACD,EAAE,CAACG,cAAJ,CAAvD,CACAR,CAAC,EAAI,CAAL,CACD,CACD,GAAIA,CAAC,GAAKG,GAAV,CAAe,CACbF,CAAC,EAAI,CAAL,CACAE,GAAG,CAAGL,QAAQ,CAACG,CAAD,CAAd,CACAR,SAAS,CAACgB,IAAV,CAAeP,GAAf,EACAA,GAAG,CAAG,CAAN,CACAF,CAAC,CAAG,CAAJ,CACD,CACF,CAZD,EAaA,IAAK,GAAIU,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGZ,QAAQ,CAACa,MAA7B,CAAqCD,CAAC,EAAI,CAA1C,CAA6C,CAC3CjB,SAAS,CAACiB,CAAD,CAAT,CAAeE,IAAI,CAACC,KAAL,CAAWpB,SAAS,CAACiB,CAAD,CAAT,CAAeZ,QAAQ,CAACY,CAAD,CAAlC,CAAf,CACD,CACD,MACF,IAAK,EAAL,CACErB,OAAO,CAACe,OAAR,CAAgB,SAACC,EAAD,CAAQ,CACtB,GAAIL,CAAC,EAAIG,GAAT,CAAc,CACZb,MAAM,CAAGY,GAAG,EAAII,MAAM,CAACD,EAAE,CAACS,SAAJ,CAAhB,CAAiCZ,GAAG,EAAII,MAAM,CAACD,EAAE,CAACU,WAAJ,CAApD,CACAf,CAAC,EAAI,CAAL,CACD,CACD,GAAIA,CAAC,GAAKG,GAAV,CAAe,CACbF,CAAC,EAAI,CAAL,CACAE,GAAG,CAAGL,QAAQ,CAACG,CAAD,CAAd,CACAR,SAAS,CAACgB,IAAV,CAAeP,GAAf,EACAA,GAAG,CAAG,CAAN,CACAF,CAAC,CAAG,CAAJ,CACD,CACF,CAZD,EAaA,IAAK,GAAIU,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAGZ,QAAQ,CAACa,MAA7B,CAAqCD,EAAC,EAAI,CAA1C,CAA6C,CAC3CjB,SAAS,CAACiB,EAAD,CAAT,CAAeE,IAAI,CAACC,KAAL,CAAWpB,SAAS,CAACiB,EAAD,CAAT,CAAeZ,QAAQ,CAACY,EAAD,CAAlC,CAAf,CACD,CACD,MACF,IAAK,EAAL,CACEhB,KAAK,CAAG,0BAAR,CACAL,OAAO,CAACe,OAAR,CAAgB,SAACC,EAAD,CAAQ,CACtB,GAAIL,CAAC,EAAIG,GAAT,CAAc,CACZb,MAAM,CAAGY,GAAG,EAAII,MAAM,CAACD,EAAE,CAACW,YAAJ,CAAhB,CAAoCd,GAAG,EAAII,MAAM,CAACD,EAAE,CAACY,cAAJ,CAAvD,CACAjB,CAAC,EAAI,CAAL,CACD,CACD,GAAIA,CAAC,GAAKG,GAAV,CAAe,CACbF,CAAC,EAAI,CAAL,CACAE,GAAG,CAAGL,QAAQ,CAACG,CAAD,CAAd,CACAR,SAAS,CAACgB,IAAV,CAAeP,GAAf,EACAA,GAAG,CAAG,CAAN,CACAF,CAAC,CAAG,CAAJ,CACD,CACF,CAZD,EAaA,IAAK,GAAIU,CAAAA,GAAC,CAAG,CAAb,CAAgBA,GAAC,CAAGZ,QAAQ,CAACa,MAA7B,CAAqCD,GAAC,EAAI,CAA1C,CAA6C,CAC3CjB,SAAS,CAACiB,GAAD,CAAT,CAAeE,IAAI,CAACC,KAAL,CAAWpB,SAAS,CAACiB,GAAD,CAAT,CAAeZ,QAAQ,CAACY,GAAD,CAAlC,CAAf,CACD,CACD,MACF,QACE,MAzDJ,CA4DA,GAAIlB,UAAJ,CAAgB,CACdC,SAAS,CAAGA,SAAS,CAACyB,GAAV,CAAc,SAACb,EAAD,QAAQO,CAAAA,IAAI,CAACC,KAAL,CAAYR,EAAE,CAAG,MAAN,CAAgB,UAA3B,CAAR,EAAd,CAAZ,CACD,CAED,GAAMc,CAAAA,GAAG,CAAG,CACVC,IAAI,CAAE,CACJC,MAAM,CAAE,CAAC,KAAD,CAAQ,KAAR,CAAe,MAAf,CAAuB,MAAvB,CAA+B,KAA/B,CAAsC,MAAtC,CAA8C,KAA9C,CAAqD,KAArD,CAA4D,KAA5D,CADJ,CAEJC,QAAQ,CAAE,CACR,CACEC,KAAK,WAAK5B,SAAS,CAACJ,MAAD,CAAd,UADP,CAEEiC,eAAe,CAAE9B,KAFnB,CAGE0B,IAAI,CAAE3B,SAHR,CADQ,CAFN,CADI,CAWVgC,OAAO,CAAE,CACPC,UAAU,CAAE,IADL,CAEPC,mBAAmB,CAAE,KAFd,CAGPC,MAAM,CAAE,CACNC,OAAO,CAAE,CACPC,GAAG,CAAE,CADE,CAEPC,IAAI,CAAE,EAFC,CAGPC,KAAK,CAAE,EAHA,CAIPC,MAAM,CAAE,CAJD,CADH,CAHD,CAWPC,MAAM,CAAE,CACNC,KAAK,CAAE,CAAC,CACNC,KAAK,CAAE,CAAEC,OAAO,CAAE,KAAX,CADD,CAENC,SAAS,CAAE,CACTD,OAAO,CAAE,KADA,CAETE,UAAU,CAAE,KAFH,CAFL,CAAD,CADD,CAQNC,KAAK,CAAE,CAAC,CACNJ,KAAK,CAAE,CAAEC,OAAO,CAAE,KAAX,CADD,CAENC,SAAS,CAAE,CACTD,OAAO,CAAE,KADA,CAETE,UAAU,CAAE,KAFH,CAFL,CAAD,CARD,CAXD,CAXC,CAAZ,CA0CA,MAAOpB,CAAAA,GAAP,CACD,CArHM,CAsHP,MAAO,IAAMsB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACpD,OAAD,CAAUC,MAAV,CAAkBC,MAAlB,CAA0BC,UAA1B,CAAsCkD,UAAtC,CAAqD,CACtF,GAAIjD,CAAAA,SAAS,CAAG,EAAhB,CACA,GAAIC,CAAAA,KAAK,CAAG,wBAAZ,CACA,GAAMC,CAAAA,SAAS,CAAG,CAAC,WAAD,CAAc,QAAd,CAAwB,WAAxB,CAAlB,CACA,GAAMgD,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAMC,CAAAA,SAAS,CAAG,EAAlB,CACA,GAAIC,CAAAA,IAAI,CAAG,CAAX,CACA,GAAIC,CAAAA,KAAK,CAAG,CAAZ,CACA,GAAIC,CAAAA,KAAK,CAAG,IAAZ,CACA,OAAQxD,MAAR,EACE,IAAK,EAAL,CAEEF,OAAO,CAACe,OAAR,CAAgB,SAACC,EAAD,CAAQ,CACtB,GAAIA,EAAE,CAACR,IAAH,CAAQmD,KAAR,CAAc,CAAd,CAAiB,CAAjB,IAAwBD,KAA5B,CAAmC,CACjCA,KAAK,CAAG1C,EAAE,CAACR,IAAH,CAAQmD,KAAR,CAAc,CAAd,CAAiB,CAAjB,CAAR,CACAJ,SAAS,CAACnC,IAAV,CAAeoC,IAAf,EACAF,UAAU,CAAClC,IAAX,CAAgBqC,KAAhB,EACAD,IAAI,CAAG,CAAP,CACAC,KAAK,CAAG,CAAR,CACD,CACDD,IAAI,EAAI,CAAR,CACAC,KAAK,EAAIxC,MAAM,CAACD,EAAE,CAAC4C,SAAJ,CAAf,CACD,CAVD,EAWA,IAAK,GAAIvC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGkC,SAAS,CAACjC,MAA9B,CAAsCD,CAAC,EAAI,CAA3C,CAA8C,CAC5C,GAAIkC,SAAS,CAAClC,CAAD,CAAT,GAAiB,CAArB,CAAwB,CACtBjB,SAAS,CAACiB,CAAD,CAAT,CAAe,CAAf,CACD,CAFD,IAEO,CACLjB,SAAS,CAACiB,CAAD,CAAT,CAAeE,IAAI,CAACC,KAAL,CAAW8B,UAAU,CAACjC,CAAD,CAAV,CAAgBkC,SAAS,CAAClC,CAAD,CAApC,CAAf,CACD,CACF,CACD,MACF,IAAK,EAAL,CACErB,OAAO,CAACe,OAAR,CAAgB,SAACC,EAAD,CAAQ,CACtB,GAAIA,EAAE,CAACR,IAAH,CAAQmD,KAAR,CAAc,CAAd,CAAiB,CAAjB,IAAwBD,KAA5B,CAAmC,CACjCA,KAAK,CAAG1C,EAAE,CAACR,IAAH,CAAQmD,KAAR,CAAc,CAAd,CAAiB,CAAjB,CAAR,CACAJ,SAAS,CAACnC,IAAV,CAAeoC,IAAf,EACAF,UAAU,CAAClC,IAAX,CAAgBqC,KAAhB,EACAD,IAAI,CAAG,CAAP,CACAC,KAAK,CAAG,CAAR,CACD,CACDD,IAAI,EAAI,CAAR,CACAC,KAAK,EAAIxC,MAAM,CAACD,EAAE,CAAC6C,MAAJ,CAAf,CACD,CAVD,EAWA,IAAK,GAAIxC,CAAAA,GAAC,CAAG,CAAb,CAAgBA,GAAC,CAAGkC,SAAS,CAACjC,MAA9B,CAAsCD,GAAC,EAAI,CAA3C,CAA8C,CAC5C,GAAIkC,SAAS,CAAClC,GAAD,CAAT,GAAiB,CAArB,CAAwB,CACtBjB,SAAS,CAACiB,GAAD,CAAT,CAAe,CAAf,CACD,CAFD,IAEO,CACLjB,SAAS,CAACiB,GAAD,CAAT,CAAeE,IAAI,CAACC,KAAL,CAAW8B,UAAU,CAACjC,GAAD,CAAV,CAAgBkC,SAAS,CAAClC,GAAD,CAApC,CAAf,CACD,CACF,CACD,MACF,IAAK,EAAL,CACEhB,KAAK,CAAG,0BAAR,CACAL,OAAO,CAACe,OAAR,CAAgB,SAACC,EAAD,CAAQ,CACtB,GAAIA,EAAE,CAACR,IAAH,CAAQmD,KAAR,CAAc,CAAd,CAAiB,CAAjB,IAAwBD,KAA5B,CAAmC,CACjCA,KAAK,CAAG1C,EAAE,CAACR,IAAH,CAAQmD,KAAR,CAAc,CAAd,CAAiB,CAAjB,CAAR,CACAJ,SAAS,CAACnC,IAAV,CAAeoC,IAAf,EACAF,UAAU,CAAClC,IAAX,CAAgBqC,KAAhB,EACAD,IAAI,CAAG,CAAP,CACAC,KAAK,CAAG,CAAR,CACD,CACDD,IAAI,EAAI,CAAR,CACAC,KAAK,EAAIxC,MAAM,CAACD,EAAE,CAAC8C,SAAJ,CAAf,CACD,CAVD,EAWA,IAAK,GAAIzC,CAAAA,GAAC,CAAG,CAAb,CAAgBA,GAAC,CAAGkC,SAAS,CAACjC,MAA9B,CAAsCD,GAAC,EAAI,CAA3C,CAA8C,CAC5C,GAAIkC,SAAS,CAAClC,GAAD,CAAT,GAAiB,CAArB,CAAwB,CACtBjB,SAAS,CAACiB,GAAD,CAAT,CAAe,CAAf,CACD,CAFD,IAEO,CACLjB,SAAS,CAACiB,GAAD,CAAT,CAAeE,IAAI,CAACC,KAAL,CAAW8B,UAAU,CAACjC,GAAD,CAAV,CAAgBkC,SAAS,CAAClC,GAAD,CAApC,CAAf,CACD,CACF,CACD,MACF,QACE,MAhEJ,CAkEA,GAAIlB,UAAJ,CAAgB,CACdC,SAAS,CAAGA,SAAS,CAACyB,GAAV,CAAc,SAACb,EAAD,QAAQO,CAAAA,IAAI,CAACC,KAAL,CAAYR,EAAE,CAAG,MAAN,CAAgBqC,UAA3B,CAAR,EAAd,CAAZ,CACD,CAED,GAAMvB,CAAAA,GAAG,CAAG,CACVC,IAAI,CAAE,CACJC,MAAM,CAAE,CAAC,KAAD,CAAQ,KAAR,CAAe,MAAf,CAAuB,MAAvB,CAA+B,KAA/B,CAAsC,MAAtC,CAA8C,KAA9C,CAAqD,KAArD,CAA4D,KAA5D,CADJ,CAEJC,QAAQ,CAAE,CACR,CACEC,KAAK,WAAK5B,SAAS,CAACJ,MAAD,CAAd,UADP,CAEEiC,eAAe,CAAE9B,KAFnB,CAGE0B,IAAI,CAAE3B,SAHR,CADQ,CAFN,CADI,CAWVgC,OAAO,CAAE,CACPC,UAAU,CAAE,IADL,CAEPC,mBAAmB,CAAE,KAFd,CAGPC,MAAM,CAAE,CACNC,OAAO,CAAE,CACPC,GAAG,CAAE,CADE,CAEPC,IAAI,CAAE,EAFC,CAGPC,KAAK,CAAE,EAHA,CAIPC,MAAM,CAAE,CAJD,CADH,CAHD,CAWPC,MAAM,CAAE,CACNC,KAAK,CAAE,CAAC,CACNC,KAAK,CAAE,CAAEC,OAAO,CAAE,KAAX,CADD,CAENC,SAAS,CAAE,CACTD,OAAO,CAAE,KADA,CAETE,UAAU,CAAE,KAFH,CAFL,CAAD,CADD,CAQNC,KAAK,CAAE,CAAC,CACNJ,KAAK,CAAE,CAAEC,OAAO,CAAE,KAAX,CADD,CAENC,SAAS,CAAE,CACTD,OAAO,CAAE,KADA,CAETE,UAAU,CAAE,KAFH,CAFL,CAAD,CARD,CAXD,CAXC,CAAZ,CA0CA,MAAOpB,CAAAA,GAAP,CACD,CA1HM,CA4HP,MAAO,SAASiC,CAAAA,SAAT,CAAmBC,CAAnB,CAAsB,CAC3B,GAAMC,CAAAA,CAAC,CAAG,GAAIzD,CAAAA,IAAJ,EAAV,CACAyD,CAAC,CAACC,OAAF,CAAUD,CAAC,CAACvD,OAAF,GAAcsD,CAAxB,EACA,MAAOC,CAAAA,CAAC,CAACE,WAAF,GAAgBR,KAAhB,CAAsB,CAAtB,CAAyB,EAAzB,CAAP,CACD","sourcesContent":["export const getWorldChartInfo = (summary, period, status, numeration) => {\n  let chartData = [];\n  let color = 'rgba(221, 1, 1, 0.650)';\n  const statusArr = period ? ['New confirmed', 'New deaths', 'New recovered'] : ['Confirmed', 'Deaths', 'Recovered'];\n  const now = new Date();\n  const MonthArr = [15, 31, 30, 31, 31, 30, 31, 30, now.getDate()];\n  let c = 0;\n  let j = 0;\n  let sum = 0;\n  let num = MonthArr[j];\n  switch (status) {\n    case 0:\n      summary.forEach((el) => {\n        if (c <= num) {\n          period ? sum += Number(el.NewConfirmed) : sum += Number(el.TotalConfirmed);\n          c += 1;\n        }\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n      break;\n    case 1:\n      summary.forEach((el) => {\n        if (c <= num) {\n          period ? sum += Number(el.NewDeaths) : sum += Number(el.TotalDeaths);\n          c += 1;\n        }\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n      break;\n    case 2:\n      color = 'rgba(75, 148, 20, 0.644)';\n      summary.forEach((el) => {\n        if (c <= num) {\n          period ? sum += Number(el.NewRecovered) : sum += Number(el.TotalRecovered);\n          c += 1;\n        }\n        if (c === num) {\n          j += 1;\n          num = MonthArr[j];\n          chartData.push(sum);\n          sum = 0;\n          c = 0;\n        }\n      });\n      for (let i = 0; i < MonthArr.length; i += 1) {\n        chartData[i] = Math.trunc(chartData[i] / MonthArr[i]);\n      }\n      break;\n    default:\n      break;\n  }\n\n  if (numeration) {\n    chartData = chartData.map((el) => Math.trunc((el * 100000) / 7827000000));\n  }\n\n  const res = {\n    data: {\n      labels: ['Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n      datasets: [\n        {\n          label: `${statusArr[status]} cases`,\n          backgroundColor: color,\n          data: chartData,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      layout: {\n        padding: {\n          top: 0,\n          left: 15,\n          right: 15,\n          bottom: 0,\n        },\n      },\n      scales: {\n        xAxes: [{\n          ticks: { display: false },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n          },\n        }],\n        yAxes: [{\n          ticks: { display: false },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n          },\n        }],\n      },\n\n    },\n  };\n\n  return res;\n};\nexport const getCountryChartInfo = (summary, period, status, numeration, population) => {\n  let chartData = [];\n  let color = 'rgba(221, 1, 1, 0.650)';\n  const statusArr = ['Confirmed', 'Deaths', 'Recovered'];\n  const monthTotal = [];\n  const daysTotal = [];\n  let days = 0;\n  let month = 0;\n  let check = '02';\n  switch (status) {\n    case 0:\n\n      summary.forEach((el) => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n        days += 1;\n        month += Number(el.Confirmed);\n      });\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n      break;\n    case 1:\n      summary.forEach((el) => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n        days += 1;\n        month += Number(el.Deaths);\n      });\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n      break;\n    case 2:\n      color = 'rgba(75, 148, 20, 0.644)';\n      summary.forEach((el) => {\n        if (el.Date.slice(5, 7) !== check) {\n          check = el.Date.slice(5, 7);\n          daysTotal.push(days);\n          monthTotal.push(month);\n          days = 0;\n          month = 0;\n        }\n        days += 1;\n        month += Number(el.Recovered);\n      });\n      for (let i = 0; i < daysTotal.length; i += 1) {\n        if (daysTotal[i] === 0) {\n          chartData[i] = 0;\n        } else {\n          chartData[i] = Math.trunc(monthTotal[i] / daysTotal[i]);\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  if (numeration) {\n    chartData = chartData.map((el) => Math.trunc((el * 100000) / population));\n  }\n\n  const res = {\n    data: {\n      labels: ['Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n      datasets: [\n        {\n          label: `${statusArr[status]} cases`,\n          backgroundColor: color,\n          data: chartData,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      layout: {\n        padding: {\n          top: 0,\n          left: 15,\n          right: 15,\n          bottom: 0,\n        },\n      },\n      scales: {\n        xAxes: [{\n          ticks: { display: false },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n          },\n        }],\n        yAxes: [{\n          ticks: { display: false },\n          gridLines: {\n            display: false,\n            drawBorder: false,\n          },\n        }],\n      },\n\n    },\n  };\n\n  return res;\n};\n\nexport function dtimeNums(e) {\n  const n = new Date();\n  n.setDate(n.getDate() + e);\n  return n.toISOString().slice(0, 10);\n}\n"]},"metadata":{},"sourceType":"module"}