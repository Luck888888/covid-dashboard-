{"ast":null,"code":"export var periodInfo=['Whole period','Latest day'];export var statusInfo=['Global cases','Global deaths','Global recovered'];export var filterInfo=function filterInfo(information,period,status){var result=[];var filteredInfo=[];var globalInfo=[];var global=information.Global;var info=information.Countries;if(status===0&&period===0){info.forEach(function(el){var countryInfo={country:el.Country,info:el.TotalConfirmed};filteredInfo.push(countryInfo);});globalInfo.push({global:global.TotalConfirmed,textline:'Global Cases',rowText:'cases'});}else if(status===0&&period===1){info.forEach(function(el){var countryInfo={country:el.Country,info:el.NewConfirmed};filteredInfo.push(countryInfo);});globalInfo.push({global:global.NewConfirmed,textline:'Global Cases',rowText:'cases'});}else if(status===1&&period===0){info.forEach(function(el){var countryInfo={country:el.Country,info:el.TotalDeaths};filteredInfo.push(countryInfo);});globalInfo.push({global:global.TotalDeaths,textline:'Global Deaths',rowText:'deaths'});}else if(status===1&&period===1){info.forEach(function(el){var countryInfo={country:el.Country,info:el.NewDeaths};filteredInfo.push(countryInfo);});globalInfo.push({global:global.NewDeaths,textline:'Global Deaths',rowText:'deaths'});}else if(status===2&&period===0){info.forEach(function(el){var countryInfo={country:el.Country,info:el.TotalRecovered};filteredInfo.push(countryInfo);});globalInfo.push({global:global.TotalRecovered,textline:'Global Recovery',rowText:'recovered'});}else if(status===2&&period===1){info.forEach(function(el){var countryInfo={country:el.Country,info:el.NewRecovered};filteredInfo.push(countryInfo);});globalInfo.push({global:global.NewRecovered,textline:'Global Recovery',rowText:'recovered'});}filteredInfo.sort(function(a,b){return a.info<b.info?1:-1;});result=[filteredInfo,globalInfo];return result;};export var findCountryInfo=function findCountryInfo(information,country){var countryInfo={};var info=information.Countries;info.forEach(function(el){if(el.Country===country){countryInfo={country:el.Country,NewConfirmed:el.NewConfirmed,TotalConfirmed:el.TotalConfirmed,NewDeaths:el.NewDeaths,TotalDeaths:el.TotalDeaths,NewRecovered:el.NewRecovered,TotalRecovered:el.TotalRecovered};}});return countryInfo;};","map":{"version":3,"sources":["E:/RssSchool/Covid_My/covid-dashboard-/src/js/table1Info.js"],"names":["periodInfo","statusInfo","filterInfo","information","period","status","result","filteredInfo","globalInfo","global","Global","info","Countries","forEach","el","countryInfo","country","Country","TotalConfirmed","push","textline","rowText","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","sort","a","b","findCountryInfo"],"mappings":"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","sourcesContent":["export const periodInfo = ['Whole period', 'Latest day'];\nexport const statusInfo = ['Global cases', 'Global deaths', 'Global recovered'];\n\nexport const filterInfo = (information, period, status) => {\n  let result = [];\n  const filteredInfo = [];\n  const globalInfo = [];\n  const global = information.Global;\n  const info = information.Countries;\n  if (status === 0 && period === 0) {\n    info.forEach((el) => {\n      const countryInfo = {\n        country: el.Country,\n        info: el.TotalConfirmed,\n      };\n      filteredInfo.push(countryInfo);\n    });\n\n    globalInfo.push({\n      global: global.TotalConfirmed,\n      textline: 'Global Cases',\n      rowText: 'cases',\n    });\n  } else if (status === 0 && period === 1) {\n    info.forEach((el) => {\n      const countryInfo = {\n        country: el.Country,\n        info: el.NewConfirmed,\n\n      };\n      filteredInfo.push(countryInfo);\n    });\n    globalInfo.push({\n      global: global.NewConfirmed,\n      textline: 'Global Cases',\n      rowText: 'cases',\n    });\n  } else if (status === 1 && period === 0) {\n    info.forEach((el) => {\n      const countryInfo = {\n        country: el.Country,\n        info: el.TotalDeaths,\n\n      };\n      filteredInfo.push(countryInfo);\n    });\n    globalInfo.push({\n      global: global.TotalDeaths,\n      textline: 'Global Deaths',\n      rowText: 'deaths',\n    });\n  } else if (status === 1 && period === 1) {\n    info.forEach((el) => {\n      const countryInfo = {\n        country: el.Country,\n        info: el.NewDeaths,\n      };\n      filteredInfo.push(countryInfo);\n    });\n    globalInfo.push({\n      global: global.NewDeaths,\n      textline: 'Global Deaths',\n      rowText: 'deaths',\n    });\n  } else if (status === 2 && period === 0) {\n    info.forEach((el) => {\n      const countryInfo = {\n        country: el.Country,\n        info: el.TotalRecovered,\n      };\n      filteredInfo.push(countryInfo);\n    });\n    globalInfo.push({\n      global: global.TotalRecovered,\n      textline: 'Global Recovery',\n      rowText: 'recovered',\n    });\n  } else if (status === 2 && period === 1) {\n    info.forEach((el) => {\n      const countryInfo = {\n        country: el.Country,\n        info: el.NewRecovered,\n      };\n      filteredInfo.push(countryInfo);\n    });\n    globalInfo.push({\n      global: global.NewRecovered,\n      textline: 'Global Recovery',\n      rowText: 'recovered',\n    });\n  }\n  filteredInfo.sort((a, b) => ((a.info < b.info) ? 1 : -1));\n  result = [filteredInfo, globalInfo];\n\n  return result;\n};\n\nexport const findCountryInfo = (information, country) => {\n  let countryInfo = {};\n  const info = information.Countries;\n  info.forEach((el) => {\n    if (el.Country === country) {\n      countryInfo = {\n        country: el.Country,\n        NewConfirmed: el.NewConfirmed,\n        TotalConfirmed: el.TotalConfirmed,\n        NewDeaths: el.NewDeaths,\n        TotalDeaths: el.TotalDeaths,\n        NewRecovered: el.NewRecovered,\n        TotalRecovered: el.TotalRecovered,\n      };\n    }\n  });\n  return countryInfo;\n};\n"]},"metadata":{},"sourceType":"module"}