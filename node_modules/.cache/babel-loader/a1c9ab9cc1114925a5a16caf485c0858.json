{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\RssSchool\\\\covid-dashboard\\\\covid-dashboard\\\\covid-dashboard\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\n\n/* eslint-disable max-len */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MapView from './components/Map/MapView';\nimport 'leaflet/dist/leaflet.css';\nimport './Css/List.scss';\nimport axios from './axios';\nimport Summary from './components/Summary.jsx';\nimport DetailsView from './components/Map/DetailsView.jsx';\nimport './components/Map.css';\nimport './App.scss';\nimport Table1 from './components/table1.jsx';\nimport Table1p2 from './components/table1p2.jsx';\nimport useFetch from './components/getInfo.jsx';\nimport './App.css';\nimport { filterInfo, periodInfo, statusInfo } from './js/table1Info';\nimport findCountryInfo from './js/findCountryInfo';\nimport Chart4 from './components/chart4.jsx';\nimport { getWorldChartInfo, getCountryChartInfo, dtimeNums } from './js/getChartInfo';\nimport Footer from './components/footer.jsx';\n\nfunction App() {\n  _s();\n\n  const [locationArray, setLocationArray] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]);\n  const [loading, setLoading] = useState(false);\n  const info = useFetch('https://api.covid19api.com/summary');\n  const [status, setStatusInfo] = useState(0);\n  const [period, setPeriodInfo] = useState(0);\n  const [numeration, setNumeration] = useState(0);\n  const [countryData, setCountry] = useState('Belarus');\n  const [chartCountry, setChartCountry] = useState('World');\n  const [displayingCountryData, setdisplayingCountryData] = useState(false);\n  const OneCountryChartInfo = useFetch(`https://api.covid19api.com/dayone/country/${countryData}`);\n  const WorldChartInfo = useFetch(`https://api.covid19api.com/world?from=2020-03-01T00:00:00Z&to=${dtimeNums(-1)}T00:00:00Z`);\n  const population = useFetch(`https://restcountries.eu/rest/v2/name/${countryData}`);\n\n  const changeConditionfromTable = (p, s) => {\n    setPeriodInfo(p);\n    setStatusInfo(s);\n  };\n\n  const changeCondition = (p, s, n) => {\n    setPeriodInfo(p);\n    setStatusInfo(s);\n    setNumeration(n);\n  };\n\n  const filterChartData = () => {\n    if (displayingCountryData) {\n      return getCountryChartInfo(OneCountryChartInfo, period, status, numeration, population[0].population);\n    }\n\n    return getWorldChartInfo(WorldChartInfo, period, status, numeration);\n  };\n\n  const filterData = () => filterInfo(info, period, status);\n\n  const findCountry = country => {\n    setCountry(country);\n    setChartCountry(country);\n    setdisplayingCountryData(true);\n  };\n\n  function sortedLocationArray(locations) {\n    // eslint-disable-next-line max-len\n    return [...locations].sort((location1, location2) => location2.latest.confirmed - location1.latest.confirmed);\n  }\n\n  const onSelectLocation = useCallback(id => {\n    const location = locationArray.find(_location => _location.id === id);\n\n    if (location === undefined) {\n      setSelectedLocation(null);\n      return;\n    }\n\n    setSelectedLocation(location);\n    const {\n      coordinates: {\n        latitude,\n        longitude\n      }\n    } = location;\n    setMapCenter([latitude, longitude]);\n  }, [locationArray]);\n  const onDeselectLocation = useCallback(() => {\n    setSelectedLocation(null);\n  }, []);\n  useEffect(() => {\n    setLoading(true);\n    axios.get('/v2/locations').then(res => {\n      const sortedLocations = sortedLocationArray(res.data.locations);\n      setLoading(false);\n\n      if (res.status === 200) {\n        setLocationArray(sortedLocations);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  let detailsView = null;\n\n  if (selectedLocation != null) {\n    detailsView = /*#__PURE__*/_jsxDEV(DetailsView, {\n      location: selectedLocation,\n      onClickClose: onDeselectLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"COVID-19 Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Summary, {\n      locationArray: locationArray,\n      loading: loading,\n      selectedLocation: selectedLocation,\n      onSelectItem: onSelectLocation,\n      onDeselectItem: onDeselectLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards_map\",\n      children: [/*#__PURE__*/_jsxDEV(MapView, {\n        locationArray: locationArray,\n        mapCenter: mapCenter,\n        onSelectMarker: onSelectLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 8\n      }, this), detailsView]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }, this), info && WorldChartInfo && /*#__PURE__*/_jsxDEV(Table1, {\n      changeCondition: changeConditionfromTable,\n      filterData: filterData,\n      filterChartData: filterChartData(periodInfo),\n      info: filterData(),\n      periodInfo: periodInfo,\n      findCountry: findCountry,\n      statusInfo: statusInfo,\n      status: status,\n      period: period\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 36\n    }, this), info && population && /*#__PURE__*/_jsxDEV(Table1p2, {\n      info: findCountryInfo(info, countryData),\n      population: population[0].population\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 32\n    }, this), info && WorldChartInfo && /*#__PURE__*/_jsxDEV(Chart4, {\n      changeCondition: changeCondition,\n      info: filterChartData(),\n      country: chartCountry,\n      statusInfo: statusInfo,\n      periodInfo: periodInfo,\n      status: status,\n      period: period,\n      numeration: numeration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), info && /*#__PURE__*/_jsxDEV(Table1p2, {\n      info: findCountryInfo(info, countryData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"LPCQ+h/3pwGcoVFTarHY16FG2RA=\", false, function () {\n  return [useFetch, useFetch, useFetch, useFetch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/RssSchool/covid-dashboard/covid-dashboard/covid-dashboard/src/App.jsx"],"names":["React","useState","useEffect","useCallback","MapView","axios","Summary","DetailsView","Table1","Table1p2","useFetch","filterInfo","periodInfo","statusInfo","findCountryInfo","Chart4","getWorldChartInfo","getCountryChartInfo","dtimeNums","Footer","App","locationArray","setLocationArray","selectedLocation","setSelectedLocation","mapCenter","setMapCenter","loading","setLoading","info","status","setStatusInfo","period","setPeriodInfo","numeration","setNumeration","countryData","setCountry","chartCountry","setChartCountry","displayingCountryData","setdisplayingCountryData","OneCountryChartInfo","WorldChartInfo","population","changeConditionfromTable","p","s","changeCondition","n","filterChartData","filterData","findCountry","country","sortedLocationArray","locations","sort","location1","location2","latest","confirmed","onSelectLocation","id","location","find","_location","undefined","coordinates","latitude","longitude","onDeselectLocation","get","then","res","sortedLocations","data","catch","error","console","log","detailsView"],"mappings":"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","sourcesContent":["/* eslint-disable */\n/* eslint-disable max-len */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MapView from './components/Map/MapView';\nimport 'leaflet/dist/leaflet.css';\nimport './Css/List.scss';\nimport axios from './axios';\nimport Summary from './components/Summary.jsx';\nimport DetailsView from './components/Map/DetailsView.jsx';\nimport './components/Map.css';\nimport './App.scss';\nimport Table1 from './components/table1.jsx';\nimport Table1p2 from './components/table1p2.jsx';\nimport useFetch from './components/getInfo.jsx';\nimport './App.css';\n\nimport {\n  filterInfo,\n  periodInfo,\n  statusInfo,\n} from './js/table1Info';\nimport findCountryInfo from './js/findCountryInfo';\nimport Chart4 from './components/chart4.jsx';\nimport { getWorldChartInfo, getCountryChartInfo, dtimeNums } from './js/getChartInfo';\nimport Footer from './components/footer.jsx';\n\nfunction App() {\n  const [locationArray, setLocationArray] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]);\n  const [loading, setLoading] = useState(false);\n  const info = useFetch('https://api.covid19api.com/summary');\n  const [status, setStatusInfo] = useState(0);\n  const [period, setPeriodInfo] = useState(0);\n  const [numeration, setNumeration] = useState(0);\n  const [countryData, setCountry] = useState('Belarus');\n  const [chartCountry, setChartCountry] = useState('World');\n  const [displayingCountryData, setdisplayingCountryData] = useState(false);\n  const OneCountryChartInfo = useFetch(`https://api.covid19api.com/dayone/country/${countryData}`);\n  const WorldChartInfo = useFetch(`https://api.covid19api.com/world?from=2020-03-01T00:00:00Z&to=${dtimeNums(-1)}T00:00:00Z`);\n  const population = useFetch(`https://restcountries.eu/rest/v2/name/${countryData}`);\n\n  const changeConditionfromTable = (p, s) => {\n    setPeriodInfo(p);\n    setStatusInfo(s);\n  };\n  const changeCondition = (p, s, n) => {\n    setPeriodInfo(p);\n    setStatusInfo(s);\n    setNumeration(n);\n  };\n\nconst filterChartData = () => {\n    if (displayingCountryData) {\n      return getCountryChartInfo(OneCountryChartInfo,\n        period,\n        status,\n        numeration,\n        population[0].population);\n    }\n    return getWorldChartInfo(WorldChartInfo, period, status, numeration);\n  };\n\n  const filterData = () => filterInfo(info, period, status);\n  const findCountry = (country) => {\n    setCountry(country);\n    setChartCountry(country);\n    setdisplayingCountryData(true);\n  };\n\n  function sortedLocationArray(locations) {\n    // eslint-disable-next-line max-len\n    return [...locations].sort((location1, location2) => location2.latest.confirmed - location1.latest.confirmed);\n  }\n  const onSelectLocation = useCallback((id) => {\n    const location = locationArray.find((_location) => _location.id === id);\n    if (location === undefined) {\n      setSelectedLocation(null);\n      return;\n    }\n    setSelectedLocation(location);\n    const { coordinates: { latitude, longitude } } = location;\n    setMapCenter([latitude, longitude]);\n  }, [locationArray]);\n\n\n  const onDeselectLocation = useCallback(() => {\n    setSelectedLocation(null);\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    axios.get('/v2/locations').then((res) => {\n      const sortedLocations = sortedLocationArray(res.data.locations);\n      setLoading(false);\n\n      if (res.status === 200) {\n        setLocationArray(sortedLocations);\n      }\n    })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  let detailsView = null;\n  if (selectedLocation != null) {\n    detailsView = <DetailsView location={selectedLocation} onClickClose={onDeselectLocation} />;\n  }\n  return (\n\n    <div className=\"App\">\n\n    {/* <div className=\"app__left\"> */}\n\n    <div className=\"app__header\">\n    <h1>COVID-19 Dashboard</h1>\n   </div>\n\n          <Summary\n        locationArray={locationArray}\n        loading={loading}\n        selectedLocation={selectedLocation}\n        onSelectItem={onSelectLocation}\n        onDeselectItem={onDeselectLocation}\n          />\n\n    <div className='cards_map'>\n       <MapView\n      locationArray={locationArray}\n      mapCenter={mapCenter}\n      onSelectMarker={onSelectLocation} />\n      {detailsView}\n </div>\n      {/* <header className=\"App-header\">\n        <h1>COVID-19 Dashboard</h1>\n      </header> */}\n      {(info && WorldChartInfo) && <Table1\n        changeCondition={changeConditionfromTable}\n        filterData={filterData}\n        filterChartData={filterChartData(periodInfo)}\n        info={filterData()}\n        periodInfo={periodInfo}\n        findCountry={findCountry}\n        statusInfo={statusInfo}\n        status={status}\n        period={period}\n      />}\n      {(info && population) && <Table1p2 info={findCountryInfo(info, countryData)}\n        population={population[0].population} />}\n      {(info && WorldChartInfo) && <Chart4\n        changeCondition={changeCondition}\n        info={filterChartData()}\n        country={chartCountry}\n        statusInfo={statusInfo}\n        periodInfo={periodInfo}\n        status={status}\n        period={period}\n        numeration={numeration}\n      />}\n      <Footer/>\n      {info && <Table1p2 info={findCountryInfo(info, countryData)} />}\n\n\n </div>\n\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}